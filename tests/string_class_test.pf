module string_class_test
!
   use funit
   use string_class, only: string
!
contains
!
   @test
   subroutine create_string()
!
      type(string), allocatable :: my_string
      integer :: length
!
      my_string = string("Hello world!")
!
      length = my_string%get_length()
      call my_string%print_()
!
      @assertEqual(length, 12)
!
   end subroutine create_string
!
!
   @test
   subroutine copy_string()
!
      type(string), allocatable :: my_string, copy
      integer :: length
!
      my_string = string("String to be copied")
      copy = string(my_string)
!
      length = copy%get_length()
      call copy%print_()
!
      @assertEqual(length, 19)
!
   end subroutine copy_string
!
!
   @test
   subroutine substring_found()
!
      type(string) :: my_string
      type(string) :: substring
!
      integer :: index, check_bool = 0
      logical :: found
!
      substring = string("eT")
      my_string = string("Is eT the best program?")
!
      call my_string%find_substring(substring, index, found)
!
      if (found) check_bool = 1
!
      @assertEqual(1, check_bool)
      @assertEqual(4, index)
!
   end subroutine substring_found
!
!
   @test
   subroutine substring_not_found()
!
      type(string) :: substring
      type(string) :: my_string
!
      integer :: index, check_bool = 1
      logical :: found
!
      substring = string("gaussian")
      my_string = string("Is eT the best program?")
!
      call my_string%find_substring(substring, index, found)
!
      if (.not. found) check_bool = 0
!
      @assertEqual(0, check_bool)
      @assertEqual(0, index)
!
   end subroutine substring_not_found
!
!
   @test
   subroutine substring_first()
!
      type(string) :: substring
      type(string) :: my_string
!
      integer :: index, check_bool = 0
      logical :: found
!
      substring = string("I")
      my_string = string("Is eT the best program?")
!
      call my_string%find_substring(substring, index, found)
!
      if (found) check_bool = 1
!
      @assertEqual(1, check_bool)
      @assertEqual(1, index)
!
   end subroutine substring_first
!
!
   @test
   subroutine substring_last()
!
      type(string) :: substring
      type(string) :: my_string
!
      integer :: index, check_bool = 0
      logical :: found
!
      substring = string("?")
      my_string = string("Is eT the best program?")
!
      call my_string%find_substring(substring, index, found)
!
      if (found) check_bool = 1
!
      @assertEqual(1, check_bool)
      @assertEqual(23, index)
!
   end subroutine substring_last
!
!
   @test
   subroutine convert_to_lowercase()
!
      type(string) :: my_string
!
      my_string = string("ABCDEFG")
!
      call my_string%convert_to_lowercase()
!
      @assertEqual(my_string%string, "abcdefg")
!
   end subroutine convert_to_lowercase
!
end module string_class_test
