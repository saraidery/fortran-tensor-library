module tensor_class_test 
!
   use funit
   use tensor_class, only: tensor
!
contains
!
   @test 
   subroutine sort_2tensor()
!
      implicit none 
!
      type(tensor), allocatable :: A, B 
!
      real(8), dimension(:,:), pointer :: A_p, B_p 
!
      integer :: k, l
!
      A = tensor([50,100])
      call A%initialize()
!
      call A%get_pointer(A_p)
!
      do k = 1, 50 
         do l = 1, 100 
!
            A_p(k, l) = k - l 
!
         enddo
      enddo
!
      B = tensor([100,50])
      call B%initialize()
!
      call A%sort(B, 'ab', 'ba')
!
      call B%get_pointer(B_p)
!
      do k = 1, 50 
         do l = 1, 100 
!
            @assertEqual(B_p(l, k), A_p(k, l)) 
!
         enddo
      enddo
!
   end subroutine sort_2tensor
!
   @test 
   subroutine sort_3tensor()
!
      implicit none 
!
      type(tensor), allocatable :: A, B 
!
      real(8), dimension(:,:,:), pointer :: A_p, B_p 
!
      integer :: k, l, m
!
      A = tensor([50,100,75])
      call A%initialize()
!
      call A%get_pointer(A_p)
!
      do k = 1, 50 
         do l = 1, 100 
            do m = 1, 75
!
               A_p(k, l, m) = k - l + m 
!
            enddo
         enddo
      enddo
!
      B = tensor([100,75,50])
      call B%initialize()
!
      call A%sort(B, 'abc', 'bca')
!
      call B%get_pointer(B_p)
!
      do k = 1, 50 
         do l = 1, 100 
            do m = 1, 75
!
               @assertEqual(B_p(l, m, k), A_p(k, l, m)) 
!
            enddo
         enddo
      enddo
!
   end subroutine sort_3tensor
!
   @test 
   subroutine sort_4tensor()
!
      implicit none 
!
      type(tensor), allocatable :: A, B 
!
      real(8), dimension(:,:,:,:), pointer :: A_p, B_p 
!
      integer :: k, l, m, n
!
      A = tensor([20,30,25,15])
      call A%initialize()
!
      call A%get_pointer(A_p)
!
      do k = 1, 20 
         do l = 1, 30 
            do m = 1, 25
               do n = 1, 15
!
               A_p(k, l, m, n) = 2*k - l + 3*m - n 
!
               enddo
            enddo
         enddo
      enddo
!
      B = tensor([25,30,20,15])
      call B%initialize()
!
      call A%sort(B, 'abcd', 'cbad')
!
      call B%get_pointer(B_p)
!
      do k = 1, 20 
         do l = 1, 30 
            do m = 1, 25
               do n = 1, 15
!
                  @assertEqual(B_p(m, l, k, n), A_p(k, l, m, n)) 
!
               enddo
            enddo
         enddo
      enddo
!
   end subroutine sort_4tensor
!
   @test 
   subroutine copy_and_scale()
!
      implicit none 
!
      type(tensor), allocatable :: a, b 
!
      real(8), dimension(:), pointer :: a_p, b_p 
!
      integer :: k 
!
      a = tensor([100])
      call a%initialize()
!
      call a%get_pointer(a_p)
!
      do k = 1, 100
!
         a_p(k) = k 
!
      enddo
!
      b = tensor([100])
      call b%initialize()
!
      call a%copy(b)
!
      call b%get_pointer(b_p)
!
      do k = 1, 100 
!
         @assertEqual(a_p(k), b_p(k))
!
      enddo
!
   end subroutine copy_and_scale
!
   @test 
   subroutine zero()
!
      implicit none 
!
      type(tensor), allocatable :: a 
!
      real(8), dimension(:), pointer :: a_p
!
      integer :: k 
!
      a = tensor([15])
      call a%initialize()
!
      call a%set_to_zero()
!
      call a%get_pointer(a_p)
!
      do k = 1, 15 
!
         @assertEqual(a_p(k), 0.0d0, tolerance=1.0d-12)
!
      enddo
!
   end subroutine zero
!
end module tensor_class_test